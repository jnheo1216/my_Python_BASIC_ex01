## 문제 12.
## 다음과 같은 특성을 갖는 숫자의 개수를 찾는 기능을 구현합니다.
## 입력으로 두개의 숫자( x, y )를 이용합니다.
## - 두 개의 숫자 x와 y를 이용하여,
##   x초과 y미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##   되는 숫자를 찾습니다.
## - 숫자들을 모두 찾은 후 해당 숫자가 총 몇 개인지를 출력합니다.

## 예1) 두 개의 숫자 1과 100이 주어졌을 경우,
##      1초과 100미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##      되는 숫자를 찾습니다.
##      - 20의 경우 각 자리 숫자를 모두 더한 값이 2이므로, 적합하지 않다.
##      - 23의 경우 각 자리 숫자를 모두 더한 값이 5이므로, 적합하다.
##      [총 개수] 19

## 예2) 두 개의 숫자 5와 500이 주어졌을 경우,
##      5초과 500미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##      되는 숫자를 찾습니다.
##      [총 개수] 98

## 입력으로 주어지는 두 개의 수 : 100 10000


def find_num_sum(a):
    n10000 = int(a/10000)
    n1000 = int(a/1000) - n10000 * 10
    n100 = int(a/100) - n10000 * 100 - n1000 * 10
    n10 = int(a/10) - n10000 * 1000 - n1000 * 100 - n100 * 10
    n1 = int(a) - n10000 * 10000 - n1000 * 1000 - n100 * 100 - n10 * 10
    return n10000 + n1000 + n100 + n10 + n1


def is_5_mul(b):
    if b % 5 == 0:
        return True
    else:
        return False


x = input("몇 초과??  ")
y = input("몇 미만??  ")
x = int(x)
y = int(y)

my_five_list = []
for i in range(x + 1, y, 1):
    tmp = i
    tmp = find_num_sum(tmp)
    if tmp % 5 == 0:
        my_five_list.append(tmp)
    else:
        pass






print("총 개수 : {}".format(len(my_five_list)))
# 총 개수 : 1980




